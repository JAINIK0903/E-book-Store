{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jainik\\\\OneDrive\\\\Desktop\\\\TS1\\\\react-formic-demo\\\\src\\\\components\\\\YoutubeForm.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useFormik } from 'formik';\nimport * as Yup from 'yup';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialValues = {\n  name: 'vishwas',\n  email: '',\n  channel: ''\n};\n\nconst onSubmit = values => {\n  console.log('Form data', values);\n};\n\nconst validate = values => {\n  // values.name ,values.email ,values.channel\n  // errors.name, errors.email ,errors.channel\n  errors.name = 'this field is required';\n  let errors = {};\n\n  if (!values.name) {\n    errors.name = 'Required';\n  }\n\n  if (!values.email) {\n    errors.email = 'Required';\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-z]{2,4}$/i.test(values.email)) if (!values.channel) {\n    errors.channel = 'Required';\n  }\n\n  return errors;\n};\n\nfunction YoutubeForm() {\n  _s();\n\n  const formik = useFormik({\n    initialValues: onSubmit,\n    validate //validationSchema\n\n  }); //console.log('Form values',formik.values)\n\n  const validationSchema = Yup.object({\n    name: Yup.string().required('Required'),\n    email: Yup.string().email('Invalid email format').required('Required'),\n    channel: Yup.string().required('Required')\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: formik.handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"lable\", {\n        htmlFor: \"name\",\n        children: \"Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        name: \"name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"lable\", {\n        htmlFor: \"email\",\n        children: \"E-mail\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        id: \"email\",\n        name: \"email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"lable\", {\n        htmlFor: \"channel\",\n        children: \"Channel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"channel\",\n        name: \"channel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n}\n\n_s(YoutubeForm, \"B/4rI4IXClQ7sG7psKj+pOuRe5Q=\", false, function () {\n  return [useFormik];\n});\n\n_c = YoutubeForm;\nexport default YoutubeForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"YoutubeForm\");","map":{"version":3,"names":["React","useFormik","Yup","initialValues","name","email","channel","onSubmit","values","console","log","validate","errors","test","YoutubeForm","formik","validationSchema","object","string","required","handleSubmit"],"sources":["C:/Users/jainik/OneDrive/Desktop/TS1/react-formic-demo/src/components/YoutubeForm.js"],"sourcesContent":["import React from 'react'\r\nimport {useFormik} from 'formik'\r\nimport * as Yup from 'yup'\r\nconst initialValues={\r\n    name:'vishwas',\r\n    email:'',\r\n    channel:''\r\n}\r\nconst onSubmit = values =>{\r\n    console.log('Form data',values)\r\n}\r\nconst validate= values => {\r\n   // values.name ,values.email ,values.channel\r\n   // errors.name, errors.email ,errors.channel\r\n    errors.name='this field is required'\r\n\r\nlet errors={}\r\nif(!values.name){\r\n errors.name= 'Required'\r\n}\r\n\r\n\r\nif(!values.email){\r\nerrors.email= 'Required'\r\n} else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-z]{2,4}$/i.test(values.email))\r\n\r\n\r\nif(!values.channel){\r\n errors.channel= 'Required'\r\n}\r\nreturn errors\r\n}\r\n\r\n\r\nfunction YoutubeForm () {\r\n  const  formik=useFormik({\r\n    initialValues:\r\n    onSubmit,\r\n    validate\r\n //validationSchema\r\n  }) \r\n    \r\n \r\n  //console.log('Form values',formik.values)\r\n  const validationSchema = Yup.object({\r\n    name:Yup.string().required('Required'),\r\n    email: Yup.string()\r\n    .email('Invalid email format')\r\n    .required('Required'),\r\n    channel:Yup.string().required('Required')\r\n})\r\n    return (\r\n        <div>\r\n        <form onSubmit={formik.handleSubmit}>\r\n            <lable htmlFor='name'>Name</lable>\r\n            <input type='text' id='name' name='name' />\r\n\r\n            <lable htmlFor='email'>E-mail</lable>\r\n            <input type='email' id='email' name='email'  />\r\n\r\n            <lable htmlFor='channel'>Channel</lable>\r\n            <input type='text' id='channel' name='channel'  />\r\n            <button type='submit'>Submit</button>\r\n        </form>\r\n        </div>\r\n    )\r\n}\r\nexport default YoutubeForm"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,SAAR,QAAwB,QAAxB;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;;AACA,MAAMC,aAAa,GAAC;EAChBC,IAAI,EAAC,SADW;EAEhBC,KAAK,EAAC,EAFU;EAGhBC,OAAO,EAAC;AAHQ,CAApB;;AAKA,MAAMC,QAAQ,GAAGC,MAAM,IAAG;EACtBC,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAwBF,MAAxB;AACH,CAFD;;AAGA,MAAMG,QAAQ,GAAEH,MAAM,IAAI;EACvB;EACA;EACCI,MAAM,CAACR,IAAP,GAAY,wBAAZ;EAEJ,IAAIQ,MAAM,GAAC,EAAX;;EACA,IAAG,CAACJ,MAAM,CAACJ,IAAX,EAAgB;IACfQ,MAAM,CAACR,IAAP,GAAa,UAAb;EACA;;EAGD,IAAG,CAACI,MAAM,CAACH,KAAX,EAAiB;IACjBO,MAAM,CAACP,KAAP,GAAc,UAAd;EACC,CAFD,MAEO,IAAI,CAAC,4CAA4CQ,IAA5C,CAAiDL,MAAM,CAACH,KAAxD,CAAL,EAGP,IAAG,CAACG,MAAM,CAACF,OAAX,EAAmB;IAClBM,MAAM,CAACN,OAAP,GAAgB,UAAhB;EACA;;EACD,OAAOM,MAAP;AACC,CApBD;;AAuBA,SAASE,WAAT,GAAwB;EAAA;;EACtB,MAAOC,MAAM,GAACd,SAAS,CAAC;IACtBE,aAAa,EACbI,QAFsB;IAGtBI,QAHsB,CAIzB;;EAJyB,CAAD,CAAvB,CADsB,CAStB;;EACA,MAAMK,gBAAgB,GAAGd,GAAG,CAACe,MAAJ,CAAW;IAClCb,IAAI,EAACF,GAAG,CAACgB,MAAJ,GAAaC,QAAb,CAAsB,UAAtB,CAD6B;IAElCd,KAAK,EAAEH,GAAG,CAACgB,MAAJ,GACNb,KADM,CACA,sBADA,EAENc,QAFM,CAEG,UAFH,CAF2B;IAKlCb,OAAO,EAACJ,GAAG,CAACgB,MAAJ,GAAaC,QAAb,CAAsB,UAAtB;EAL0B,CAAX,CAAzB;EAOE,oBACI;IAAA,uBACA;MAAM,QAAQ,EAAEJ,MAAM,CAACK,YAAvB;MAAA,wBACI;QAAO,OAAO,EAAC,MAAf;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADJ,eAEI;QAAO,IAAI,EAAC,MAAZ;QAAmB,EAAE,EAAC,MAAtB;QAA6B,IAAI,EAAC;MAAlC;QAAA;QAAA;QAAA;MAAA,QAFJ,eAII;QAAO,OAAO,EAAC,OAAf;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAJJ,eAKI;QAAO,IAAI,EAAC,OAAZ;QAAoB,EAAE,EAAC,OAAvB;QAA+B,IAAI,EAAC;MAApC;QAAA;QAAA;QAAA;MAAA,QALJ,eAOI;QAAO,OAAO,EAAC,SAAf;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAPJ,eAQI;QAAO,IAAI,EAAC,MAAZ;QAAmB,EAAE,EAAC,SAAtB;QAAgC,IAAI,EAAC;MAArC;QAAA;QAAA;QAAA;MAAA,QARJ,eASI;QAAQ,IAAI,EAAC,QAAb;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QATJ;IAAA;MAAA;MAAA;MAAA;IAAA;EADA;IAAA;IAAA;IAAA;EAAA,QADJ;AAeH;;GAhCQN,W;UACOb,S;;;KADPa,W;AAiCT,eAAeA,WAAf"},"metadata":{},"sourceType":"module"}